package co.uk.directlinegroup.tt.utils;

import co.uk.directlinegroup.tt.pages.*;
import co.uk.directlinegroup.tt.utils.common.Commands;
import com.usmanhussain.habanero.framework.WebDriverDiscovery;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

import java.util.List;

import static com.usmanhussain.habanero.framework.AbstractPage.getDriver;

/**
 * Created by 324102 on 10/13/2017.
 */
public class ClaimHandlingOperations extends WebDriverDiscovery {

    private NextEventPage nextEventPageObj = new NextEventPage();
    private ClaimsOperations claimOperationObj = new ClaimsOperations();
    private ClaimSummaryPage claimSummaryPageObj = new ClaimSummaryPage();
    private PolicyDataFieldsPage policyDataFieldsPageObj = new PolicyDataFieldsPage();
    private BasicClaimDetailsPage basicClaimDetailsPageObj = new BasicClaimDetailsPage();
    private LeftNavPanePage leftNavPanePageObj = new LeftNavPanePage();
    private ClaimCompetencyPage  claimCompetencyPageObj= new ClaimCompetencyPage();
    private Commands commandsObj = new Commands();
    private PerilQuestionsPage perilQuestionsPageObj = new PerilQuestionsPage();
    private co.uk.directlinegroup.tt.utils.Navigation navigationObj = new co.uk.directlinegroup.tt.utils.Navigation();

    public void verifyClaimIsNotAllocatedToAnyClaimHandler() {
        nextEventPageObj.waitForMoreTime();nextEventPageObj.waitForMoreTime();nextEventPageObj.waitForMoreTime();
        nextEventPageObj.switchToDefault();
        Actions action = new Actions(getDriver);
        action.moveToElement(nextEventPageObj.closeRulesEngineFrameBtn()).click(nextEventPageObj.closeRulesEngineFrameBtn()).build().perform();
        nextEventPageObj.waitForMoreTime();nextEventPageObj.waitForMoreTime();nextEventPageObj.waitForMoreTime();
        nextEventPageObj.switchToFrameById(nextEventPageObj.frame());
        perilQuestionsPageObj.btnClick(perilQuestionsPageObj.perilQuestionCancelBtn());
        String handlerAssigned = policyDataFieldsPageObj.claimAllocation().getText();
        Assert.assertTrue(handlerAssigned.equalsIgnoreCase("Not Assigned"));
        policyDataFieldsPageObj.switchToPolicyView().click();
    }

    public void validateGenericInAutoGeneratedLetter(String event) {
        getDriver().navigate().refresh();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.waitForMoreTime();
        getDriver().navigate().refresh();
        policyDataFieldsPageObj.eventGenerated(event).click();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.switchToDefault();
        nextEventPageObj.switchToFrameById(nextEventPageObj.frameEditEvent());
        policyDataFieldsPageObj.emailTab().click();
        String generic = policyDataFieldsPageObj.genericSignature().getText();
        System.out.println("generic------------------------"+generic);
        Assert.assertTrue(generic.equalsIgnoreCase(""));
        nextEventPageObj.noteCloseButton().click();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.switchToDefault();
    }

    public void verifySignatureInEmail(List<List<String>> lstInputs, String strEventType) {
        nextEventPageObj.createAndSendEmail().click();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.waitForMoreTime();
        getDriver().navigate().refresh();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.waitForMoreTime();
        policyDataFieldsPageObj.eventGenerated(strEventType).click();
        nextEventPageObj.waitForMoreTime();
        nextEventPageObj.switchToDefault();
        nextEventPageObj.switchToFrameById(nextEventPageObj.frameEditEvent());
        policyDataFieldsPageObj.emailTab().click();
        for (int i = 1 ; i < lstInputs.size(); i++){
            for (int j =0 ; j < lstInputs.get(0).size() ; j++){
                switch (lstInputs.get(0).get(j)){
                    case "Validate Signature":
                        nextEventPageObj.switchToDefault();
                        nextEventPageObj.switchToFrameById(nextEventPageObj.frame());
                        nextEventPageObj.switchToFrameById(basicClaimDetailsPageObj.emaiFrameForManualLetter());
                        String signature = basicClaimDetailsPageObj.signnatureInEmailForManualLetter().getText();
                        Assert.assertTrue(signature.equalsIgnoreCase(claimOperationObj.claimHandler));
                        break;
                }
            }
        }
    }

    public void validateTMAClaimAllocate() {
        WebElement we = claimSummaryPageObj.firstClaimID();
        String claimId = we.getText();
        System.out.println("Claim ID:: "+claimId);
        if(!commandsObj.elementDisplayedWithLessTime(By.xpath(leftNavPanePageObj.iAdminId()))) {
            navigationObj.navigateToImenu();
            navigationObj.navigateToIAdmin();
        }
        navigationObj.naivgateToManualClaimHandlerAlloc();
        claimCompetencyPageObj.manuallyAssignClaimHandler().click();
        nextEventPageObj.waitForMoreTime();nextEventPageObj.waitForMoreTime();nextEventPageObj.waitForMoreTime();
        String comptencyClaim = claimCompetencyPageObj.competencyClaimDetails().getText();
        System.out.println("comptencyClaim:: "+comptencyClaim);
        Assert.assertTrue(comptencyClaim.equalsIgnoreCase(claimId));
    }

    public void validateTMAClaimAllocateorReassign(List<List<String>> parameters){
        if(!commandsObj.elementDisplayedWithLessTime(By.xpath(leftNavPanePageObj.iAdminId()))) {
            navigationObj.navigateToImenu();
            navigationObj.navigateToIAdmin();
        }
        navigationObj.naivgateToManualClaimHandlerAlloc();
        nextEventPageObj.waitForMoreTime();nextEventPageObj.waitForMoreTime();
        this.allocateClaimToHandler();
    }

    public void allocateClaimToHandler(){
        claimCompetencyPageObj.claimId().click();
        claimCompetencyPageObj.claimId().sendKeys(claimOperationObj.claimID);
        nextEventPageObj.btnClick(claimSummaryPageObj.containsFilter());
        nextEventPageObj.waitForMoreTime();nextEventPageObj.waitForMoreTime();
        claimCompetencyPageObj.selectAllocateLink(claimOperationObj.claimID).click();
    }
}
